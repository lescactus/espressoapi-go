{
  "swagger": "2.0",
  "paths": {
    "/rest/v1/beans": {
      "get": {
        "security": [
          {
            "api_key": []
          },
          {
            "oauth": []
          }
        ],
        "description": "This will show all beans by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "beans"
        ],
        "summary": "Get all beans",
        "operationId": "getAllBeans",
        "responses": {
          "200": {
            "$ref": "#/responses/BeansResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "security": [
          {
            "api_key": []
          },
          {
            "oauth": []
          }
        ],
        "description": "This will create new beans.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "beans"
        ],
        "summary": "Create beans",
        "operationId": "createBeans",
        "parameters": [
          {
            "description": "The request body for creating beans",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateBeansRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/BeansResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "413": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/rest/v1/beans/{id}": {
      "get": {
        "security": [
          {
            "api_key": []
          },
          {
            "oauth": []
          }
        ],
        "description": "This will get the beans with the given id.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "beans"
        ],
        "summary": "Get beans",
        "operationId": "getBeans",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "id of the beans to get",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/BeansResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "security": [
          {
            "api_key": []
          },
          {
            "oauth": []
          }
        ],
        "description": "This will update beans by its given id.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "beans"
        ],
        "summary": "Update beans",
        "operationId": "updateBeansById",
        "parameters": [
          {
            "description": "The request body for updating beans",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateBeansByIdRequest"
            }
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "id of the beans to update",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/BeansResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "413": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "security": [
          {
            "api_key": []
          },
          {
            "oauth": []
          }
        ],
        "description": "This will delete beans by its given id.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "beans"
        ],
        "summary": "Delete beans",
        "operationId": "deleteBeans",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "id of the beans to delete",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ItemDeletedResponse",
            "schema": {
              "$ref": "#/definitions/ItemDeletedResponse"
            }
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/rest/v1/roasters": {
      "get": {
        "security": [
          {
            "api_key": []
          },
          {
            "oauth": []
          }
        ],
        "description": "This will show all roasters by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "roasters"
        ],
        "summary": "Get all roasters",
        "operationId": "getAllRoasters",
        "responses": {
          "200": {
            "$ref": "#/responses/RoasterResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "security": [
          {
            "api_key": []
          },
          {
            "oauth": []
          }
        ],
        "description": "This will create a new roaster.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "roasters"
        ],
        "summary": "Create roasters",
        "operationId": "createRoaster",
        "parameters": [
          {
            "description": "The request body for creating a roaster",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateRoasterRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/RoasterResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "413": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/rest/v1/roasters/{id}": {
      "get": {
        "security": [
          {
            "api_key": []
          },
          {
            "oauth": []
          }
        ],
        "description": "This will get the roaster with the given id.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "roasters"
        ],
        "summary": "Get roasters",
        "operationId": "getRoaster",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "id of the roaster to get",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RoasterResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "security": [
          {
            "api_key": []
          },
          {
            "oauth": []
          }
        ],
        "description": "This will update a roaster by its given id.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "roasters"
        ],
        "summary": "Update roasters",
        "operationId": "updateRoasterById",
        "parameters": [
          {
            "description": "The request body for updating a roaster",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRoasterByIdRequest"
            }
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "id of the roaster to update",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RoasterResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "413": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "security": [
          {
            "api_key": []
          },
          {
            "oauth": []
          }
        ],
        "description": "This will delete a roaster by its given id.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "roasters"
        ],
        "summary": "Delete roasters",
        "operationId": "deleteRoaster",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "id of the roaster to delete",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ItemDeletedResponse",
            "schema": {
              "$ref": "#/definitions/ItemDeletedResponse"
            }
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/rest/v1/sheets": {
      "get": {
        "security": [
          {
            "api_key": []
          },
          {
            "oauth": []
          }
        ],
        "description": "This will show all sheets by default.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "sheets"
        ],
        "summary": "Get all sheets",
        "operationId": "getAllSheets",
        "responses": {
          "200": {
            "$ref": "#/responses/SheetResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "security": [
          {
            "api_key": []
          },
          {
            "oauth": []
          }
        ],
        "description": "This will create a new sheet.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "sheets"
        ],
        "summary": "Create sheets",
        "operationId": "createSheet",
        "parameters": [
          {
            "description": "The request body for creating a sheet",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSheetRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/SheetResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/ErrorResponse"
          },
          "413": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/rest/v1/sheets/{id}": {
      "get": {
        "security": [
          {
            "api_key": []
          },
          {
            "oauth": []
          }
        ],
        "description": "This will get the sheet with the given id.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "sheets"
        ],
        "summary": "Get sheets",
        "operationId": "getSheet",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "id of the sheet to get",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SheetResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "security": [
          {
            "api_key": []
          },
          {
            "oauth": []
          }
        ],
        "description": "This will update a sheet by its given id.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "sheets"
        ],
        "summary": "Update sheets",
        "operationId": "updateSheetById",
        "parameters": [
          {
            "description": "The request body for updating a sheet",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateSheetByIdRequest"
            }
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "id of the sheet to update",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SheetResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          },
          "413": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "security": [
          {
            "api_key": []
          },
          {
            "oauth": []
          }
        ],
        "description": "This will delete a sheet by its given id.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "sheets"
        ],
        "summary": "Delete sheets",
        "operationId": "deleteSheet",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "id of the sheet to delete",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ItemDeletedResponse",
            "schema": {
              "$ref": "#/definitions/ItemDeletedResponse"
            }
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    }
  },
  "definitions": {
    "Bean": {
      "description": "Beans have a name, a roaster, a roast date and a roast level.",
      "type": "object",
      "title": "Bean",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Id"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "roast_date": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "RoastDate"
        },
        "roast_level": {
          "$ref": "#/definitions/RoastLevel"
        },
        "roaster": {
          "$ref": "#/definitions/Roaster"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "github.com/lescactus/espressoapi-go/internal/services/bean"
    },
    "CreateBeansRequest": {
      "description": "CreateBeansRequest represents the request body for creating beans",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "roast_date": {
          "$ref": "#/definitions/RoastDate"
        },
        "roast_level": {
          "$ref": "#/definitions/RoastLevel"
        },
        "roaster_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RoasterId"
        }
      },
      "x-go-package": "github.com/lescactus/espressoapi-go/internal/controllers"
    },
    "CreateRoasterRequest": {
      "description": "CreateRoasterRequest represents the request body for creating a roaster",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/lescactus/espressoapi-go/internal/controllers"
    },
    "CreateSheetRequest": {
      "description": "CreateSheetRequest represents the request body for creating a sheet",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/lescactus/espressoapi-go/internal/controllers"
    },
    "ItemDeletedResponse": {
      "description": "ItemDeletedResponse represents the response when an item is deleted",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Id"
        },
        "msg": {
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/lescactus/espressoapi-go/internal/controllers"
    },
    "RoastDate": {
      "type": "string",
      "format": "date-time",
      "x-go-package": "github.com/lescactus/espressoapi-go/internal/controllers"
    },
    "RoastLevel": {
      "type": "integer",
      "format": "uint8",
      "x-go-package": "github.com/lescactus/espressoapi-go/internal/models/sql"
    },
    "Roaster": {
      "description": "# Represents a roaster for this application\n\nA roaster is the professional who roasts coffee beans.",
      "type": "object",
      "title": "Roaster",
      "properties": {
        "created_at": {
          "description": "The creation date of the roaster",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "id": {
          "description": "The id for the roaster",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Id"
        },
        "name": {
          "description": "The name for the roaster",
          "type": "string",
          "x-go-name": "Name"
        },
        "updated_at": {
          "description": "The last update date of the roaster",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "github.com/lescactus/espressoapi-go/internal/services/roaster"
    },
    "Sheet": {
      "description": "# Represents a sheet for this application\n\nA sheet is a collection of shots. It's used to group shots together\nin a logical way.",
      "type": "object",
      "title": "Sheet",
      "properties": {
        "created_at": {
          "description": "The creation date of the sheet",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "id": {
          "description": "The id for the sheet",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Id"
        },
        "name": {
          "description": "The name for the sheet",
          "type": "string",
          "x-go-name": "Name"
        },
        "updated_at": {
          "description": "The last update date of the sheet",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "github.com/lescactus/espressoapi-go/internal/services/sheet"
    },
    "UpdateBeansByIdRequest": {
      "description": "UpdateBeansByIdRequest represents the request body for updating beans\nwith the given id",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "roast_date": {
          "$ref": "#/definitions/RoastDate"
        },
        "roast_level": {
          "$ref": "#/definitions/RoastLevel"
        },
        "roaster_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RoasterId"
        }
      },
      "x-go-package": "github.com/lescactus/espressoapi-go/internal/controllers"
    },
    "UpdateRoasterByIdRequest": {
      "description": "UpdateRoasterByIdRequest represents the request body for updating a roaster\nwith the given id",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/lescactus/espressoapi-go/internal/controllers"
    },
    "UpdateSheetByIdRequest": {
      "description": "UpdateSheetByIdRequest represents the request body for updating a sheet\nwith the given id",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/lescactus/espressoapi-go/internal/controllers"
    }
  },
  "responses": {
    "BeansResponse": {
      "description": "BeansResponse represents coffee beans for this application\n\nBeans have a name, a roaster, a roast date and a roast level.",
      "schema": {
        "$ref": "#/definitions/RoastLevel"
      },
      "headers": {
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "roast_date": {
          "type": "string",
          "format": "date-time"
        },
        "roast_level": {},
        "roaster": {},
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ErrorResponse": {
      "description": "ErrorResponse represents the json response\nfor http errors.\nIt contains a message describing the error",
      "headers": {
        "msg": {
          "type": "string"
        },
        "status": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "RoasterResponse": {
      "description": "RoasterResponse represents a roaster for this application\n\nA roaster is the professional who roasts coffee beans.",
      "headers": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "The creation date of the roaster"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The id for the roaster"
        },
        "name": {
          "type": "string",
          "description": "The name for the roaster"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "The last update date of the roaster"
        }
      }
    },
    "SheetResponse": {
      "description": "SheetResponse represents a sheet for this application\n\nA sheet is a collection of shots. It's used to group shots together\nin a logical way.",
      "headers": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "The creation date of the sheet"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The id for the sheet"
        },
        "name": {
          "type": "string",
          "description": "The name for the sheet"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "The last update date of the sheet"
        }
      }
    }
  }
}